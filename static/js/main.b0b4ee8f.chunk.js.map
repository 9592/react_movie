{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","prototype","PropTypes","string","isRequired","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAiCA,SAASA,EAATC,GACA,IADsBC,EACtBD,EADsBC,OAAOC,EAC7BF,EAD6BE,IAEzB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAiBxCF,EAAWG,UAAY,CACnBD,MAAQE,IAAUC,OAAOC,YAIdC,MA1Df,SAAAC,GAAgD,IAA/BV,EAA+BU,EAA/BV,MAAMN,EAAyBgB,EAAzBhB,OAAOiB,EAAkBD,EAAlBC,OAAOC,EAAWF,EAAXE,SACjC,OACIhB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACfL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAElCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVU,EAAOE,IACJ,SAACT,EAAMU,GAAP,OAAiBlB,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOW,IAAOD,OAG1DlB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACIoB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCkEjBC,6MAnFXC,MAAQ,KA+BRC,cAAgB,WAYZ,OAXeC,EAAKF,MAAMG,OAAOb,IAAK,SAAAc,GAElC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,CACO5B,MAAO2B,EAAM3B,MACbN,OAAQiC,EAAME,mBACdd,IAAOY,EAAMG,GACbnB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAQtCmB,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYZ,EAAKa,WADjB,OACHZ,EADGS,EAAAI,KAGTd,EAAKe,SAAS,CACVd,WAJK,wBAAAS,EAAAM,SAAAT,QAQbM,SAAW,WAGH,OAAOI,MAAM,iEAIbC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEzBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKpB,SAKvBqB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA1C9BG,KAAKpB,8CA8CF,IACAL,EAAUyB,KAAK5B,MAAfG,OACP,OACE9B,EAAAC,EAAAC,cAAA,OAAKG,UAAWyB,EAAS,MAAQ,gBAC5BA,EAASyB,KAAK3B,gBAAkB,kBAhFzB4B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.b0b4ee8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\n\r\nfunction Movie ({title,poster,genres,synopsis}) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n            <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Columns\">                \r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">                \r\n                    {genres.map(\r\n                        (genre,index) => <MovieGenre genre={genre} key = {index}/>\r\n                        )}\r\n                </div>                \r\n                <div className=\"Movie__Synopsis\"> \r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />                \r\n                </div>   \r\n            </div>                                    \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster,alt})\r\n{\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/> \r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>        \r\n    )\r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired\r\n\r\n}\r\n\r\nMovieGenre.prototype = {\r\n    genre : PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Movie;\r\n\r\n/*\r\nclass Movie extends Component{\r\n\r\n\r\n    static propTypes = {\r\n        title : PropTypes.string.isRequired,\r\n        poster : PropTypes.string.isRequired,\r\n        genres : PropTypes.array.isRequired,\r\n        synopsis : PropTypes.string.isRequireddfadsf\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <MoviePoster poster={this.props.poster} />\r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n/*\r\nclass MoviePoster extends Component{\r\n\r\n    static propTypes = {\r\n        poster : PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <img src={this.props.poster} alt=\"Moive Poster\" />\r\n        )\r\n    }\r\n\r\n}\r\n*/\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n  \r\n\r\nclass App extends Component\r\n{\r\n    \r\n    state = {}\r\n\r\n    //영화 정보 목록   https://yts.ag/api#list_movies\r\n\r\n    componentDidMount() {\r\n    /*\r\n        //fetch : json type URL 불러오는거???\r\n        //console.log(fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating'))\r\n        //fetch('https://yts.am/api/v2/list_movies.json?sort_by=like_count')\r\n            fetch('https://yts.am/api/v2/list_movies.json?sort_by=like_count')\r\n            //위에 코드를 실행 하고 나서 아래를 해라\r\n            //.then(response => console.log(response))\r\n            //reponse 체크 (json)\r\n            .then(response => response.json())\r\n            //.then(json => console.log('mount_json:',json))\r\n            .then(json => json.data.movies)\r\n            .then(json => console.log('mount_json_DATA:',json))\r\n            //로그 확인\r\n\r\n\r\n            //근데 에러가 나면 잡아라\r\n            //.catch(err => console.log(err))\r\n            //과거 자바스크립트\r\n            .catch(function(err){\r\n                console.log(err)\r\n            })\r\n    */\r\n        this._getMovies();\r\n    }\r\n\r\n\r\n    _renderMovies = () => {\r\n        const movies = this.state.movies.map (movie => {            \r\n            //return <Movie title={movie.title} poster={movie.large_cover_image} key = {movie.id}/>\r\n            return <Movie\r\n                          title={movie.title}\r\n                          poster={movie.medium_cover_image}\r\n                          key = {movie.id}\r\n                          genres={movie.genres}\r\n                          synopsis={movie.synopsis}\r\n            />\r\n\r\n            })\r\n        return movies\r\n        }\r\n\r\n        //\r\n    _getMovies = async () => {\r\n        const movies = await this._callApi()\r\n\r\n        this.setState({\r\n            movies\r\n            })\r\n    }\r\n\r\n    _callApi = () => {\r\n            //console.log('fetch', fetch( 'https://yts.am/api/v2/list_movies.json?sort_by=rating'))\r\n            //return fetch('https://yts.am/api/v2/list_movies.json?sort_by=like_count')\r\n            return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\r\n            //위에 코드를 실행 하고 나서 아래를 해라\r\n            //.then(response => console.log('_callAPI_log:',response))\r\n            //reponse 체크 (json)\r\n           .then(response => response.json())\r\n            //로그 확인\r\n            .then(json => json.data.movies)\r\n  //          .then(json => console.log('mount_json_DATA:',json))\r\n            //근데 에러가 나면 잡아라\r\n            //.catch(err => console.log(err))\r\n            //과거 자바스크립트\r\n            .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n  render() {\r\n    const {movies} = this.state;\r\n    return (\r\n      <div className={movies ? \"App\" : \"App--loading\"}>\r\n          {movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\n// 1 컴포넌트\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}